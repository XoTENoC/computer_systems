// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=AregIn);
    
    Not(in=instruction[15], out=notInstruction);
    
    // A Register
    // When Instruction[15] = 0 therefore, it is an A instruction so store in 
    // the register or if instruction[5] is high store in a register
    Or(a=notInstruction, b=instruction[5], out=loadAreg);
    ARegister(in=AregIn, load=loadAreg, out=outAreg, out[0..14]=addressM);
    
    // Select either instruction of inM to send to the ALU using bit 12
    Mux16(a=outAreg, b=inM, sel=instruction[12], out=AMselect);
    
    // Setting the ALU in the case of of No instruction to just return D
    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    Or(a=instruction[9], b=notInstruction, out=zy);
    Or(a=instruction[8], b=notInstruction, out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no);

    ALU(x=outDreg, y=AMselect, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=ALUoutput, zr=zero, ng=negative);
    
    // When there is an instruction Write M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // D Register
    // when there is an instruction load D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=outDreg);

    // Checking for a positive output
    Or(a=zero, b=negative, out=notPos);
    Not(in=notPos, out=posOutput);
    
    // checking for the jump conditions
    And(a=instruction[0], b=posOutput, out=j3);
    And(a=instruction[1], b=zero, out=j2);
    And(a=instruction[2], b=negative, out=j1);

    // checking if there was a jump
    Or(a=j3, b=j2, out=j32);
    Or(a=j32, b=j1, out=j321);

    // Making sure that there was an instruction
    And(a=j321, b=instruction[15], out=jumpTime);

    PC(in=outAreg, load=jumpTime, inc=true, reset=reset, out[0..14]=pc);
    
}